#!/bin/bash

builder_work_dir="uc-db-builder-workdir"
builder_output="uc-db-build"
export PATH="$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/x86_64-linux-gnu:$SNAP/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH=$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH

function print_usage {
echo "Builder for UbuntuCore for dragonboard"
echo ""
echo "positional arguments:"
echo "  model_assertion       Path to the model assertion file. This argument must"
echo "                        be given unless the state machine is being resumed, in"
echo "                        which case it cannot be given."
echo ""
echo "optional arguments:"
echo "  -h, --help            show this help message and exit"
echo "  --extra-snaps EXTRA_SNAPS"
echo "                        Extra snaps to install. This is passed through to"
echo "                        `snap prepare-image`."
echo "  -c CHANNEL, --channel CHANNEL"
echo "                        The snap channel to use"
echo ""
echo "Common options:"
echo "  --cloud-init USER-DATA-FILE"
echo "                        cloud-config data to be copied to the image"
echo "  --network-config NETWORK-CONFIG-FILE"
echo "                        Network config for cloud init"
echo "  --hooks-directory DIRECTORY"
echo "                        Path of directory in which scripts for build-time hooks will be located."
echo "  -O DIRECTORY, --output-dir DIRECTORY"
echo "                        The directory in which to put generated disk image"
echo "                        files."
echo "  -w DIRECTORY, --workdir DIRECTORY"
echo "                        The working directory in which to download and unpack"
echo "                        all the source files for the image. This directory can"
echo "                        exist or not, and it is not removed after this program"
echo "                        exits. If not given, a temporary working directory is"
echo "                        used instead"
echo " --full-size            writable partition is build to full size to occupy rest of the available space on storage"
echo " --keep-raw             keep raw writable image as well as sparse image used by fastboot"
echo "                        raw images are needed when QFIL or qdl flash tools are used"
}

unset EXTRA_SNAPS
unset CHANNEL

while [ "$1" != "" ]; do
    case $1 in
        -c | --channel)
            CHANNEL="--channel $2"
            shift
            ;;
        --extra-snaps=*)
            EX_SNAP=$(echo $1 | awk -F= '{print $2}')
            EXTRA_SNAPS="${EXTRA_SNAPS} --extra-snaps=${EX_SNAP}"
            ;;
        -O | --output-dir)
            builder_output="$2"
            shift
            ;;
        -w | --workdir)
            builder_work_dir="$2"
            shift
            ;;
        --cloud-init)
            if [ -n "$2" ] && [ -f $2 ]; then
                CLOUD_INIT="$2"
            else
                echo "wrong cloud init user data file was passed [ $2 ]"
                exit
            fi
            shift
            ;;
        --hooks-directory)
            if [ -n "$2" ] && [ -d $2 ];then
                HOOK_DIR="$2"
            else
                echo "wrong hooks dir was passed [ $2 ]}"
                exit
            fi
            shift
            ;;
        --network-config)
            if [ -n "$2" ] && [ -f $2 ]; then
                NETWORK_CONFIG="$(readlink -f ${2})"
            else
                echo "wrong network config for cloud init was passed [ $2 ]"
                exit
            fi
            shift
            ;;
        --full-size)
            BUILD_FULL_SIZE="true"
            ;;
        --help | -h)
            print_usage
            exit
            ;;
        *)
            if [ -f $1 ]; then
                MODEL_ASSERTION=$1
            else
                echo "Unknown parameter '$1'"
                print_usage
                exit
            fi
            ;;
    esac
    shift
done

# first do cleaning
rm -rf ${builder_work_dir}

echo "Running: snap prepare-image ${CHANNEL} ${EXTRA_SNAPS} ${MODEL_ASSERTION} ${builder_work_dir}"
snap prepare-image ${CHANNEL} ${EXTRA_SNAPS} ${MODEL_ASSERTION} ${builder_work_dir}

mkdir -p ${builder_work_dir}/root/system-data/
mv ${builder_work_dir}/image/boot/uboot ${builder_work_dir}/system-boot
mv ${builder_work_dir}/image/* ${builder_work_dir}/root/system-data/
cp -r ${builder_work_dir}/gadget/blobs ${builder_work_dir}/system-boot/


if [ -n "${CLOUD_INIT}" ]; then
    echo -e "\nUsing passed cloud init user data configuration: [${CLOUD_INIT}]"
    mkdir -p ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net
    cp ${CLOUD_INIT} ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net/user-data
    echo "instance-id: nocloud-static" > ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net/meta-data
fi

if [ -n "${NETWORK_CONFIG}" ]; then
    echo -e "\nUsing passed cloud init network configuration: [${NETWORK_CONFIG}]"
    mkdir -p ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net
    cp ${NETWORK_CONFIG} ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net/network-config
    echo "instance-id: nocloud-static" > ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net/meta-data
fi

if [ -n "${HOOK_DIR}" ]; then
   echo -e "\nInvoking hooks"
   export UBUNTU_IMAGE_HOOK_ROOTFS="$(realpath ${builder_work_dir}/root)"
   if [ -f ${HOOK_DIR}/post-populate-rootfs ]; then
      UBUNTU_IMAGE_HOOK_ROOTFS="$(realpath ${builder_work_dir}/root)" ${HOOK_DIR}/post-populate-rootfs
   fi
   if [ -d ${HOOK_DIR}/post-populate-rootfs.d ]; then
       UBUNTU_IMAGE_HOOK_ROOTFS="$(realpath ${builder_work_dir}/root)" find ${HOOK_DIR}/post-populate-rootfs.d -type f -executable -exec sh -c {} \;
   fi
fi

echo -e "\nCreating sparse image for writable"

if [ "${BUILD_FULL_SIZE}" = "true" ]; then
    echo "Calculating size available for writable partition"
    #Â db410c storage is: 7818182656 bytes (15269854)
    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f",(15269854-$2))}')"
    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f",(15269854-$2)*512)}')B"
    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f",(15269854-$2)/2)}')K"
    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f",(15269854-$2-51200)/2048)}')M"
#    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f", (15269854-$2)*512)}')"
    echo "ROOT_SIZE=${ROOT_SIZE}"
else
    ROOT_SIZE=$(du -sh ${builder_work_dir}/root/ | awk -v sb="$(du -sh ${builder_work_dir}/system-boot)" '{print $1+sb+50}')M
fi

echo "mkfs.ext4 -O -metadata_csum -T default -O uninit_bg -L writable -d ${builder_work_dir}/root ${builder_work_dir}/writable.raw ${ROOT_SIZE}"
mkfs.ext4 -O -metadata_csum -T default -O uninit_bg -L writable -d ${builder_work_dir}/root ${builder_work_dir}/writable.raw ${ROOT_SIZE}
echo -e "\nCreate sparse image for writable"
echo "img2simg ${builder_work_dir}/writable.raw ${builder_work_dir}/writable.img"
img2simg ${builder_work_dir}/writable.raw ${builder_work_dir}/writable.img

echo -e "\nCreating system-boot partition"
dd if=/dev/zero of=${builder_work_dir}/system-boot.img bs=1024 count=131072
mkfs.vfat -s 1 -S 512 -F 32 -n 'system-boot' ${builder_work_dir}/system-boot.img
mcopy -s -i ${builder_work_dir}/system-boot.img ${builder_work_dir}/system-boot/* ::

mkdir -p ${builder_output}
cp ${builder_work_dir}/gadget/blobs/* ${builder_output}
mv ${builder_work_dir}/writable.raw ${builder_output}/
mv ${builder_work_dir}/writable.img ${builder_output}/
mv ${builder_work_dir}/system-boot.img ${builder_output}
echo -e "\nOutput available in: '${builder_output}'"
