#!/bin/bash

builder_work_dir="uc-db-builder-workdir"
builder_output="uc-db-build"
export PATH="$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/x86_64-linux-gnu:$SNAP/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH=$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH

function print_usage {
    echo "Builder for UbuntuCore for dragonboard"
    echo ""
    echo "positional arguments:"
    echo "  model_assertion       Path to the model assertion file. This argument must"
    echo "                        be given unless the state machine is being resumed, in"
    echo "                        which case it cannot be given."
    echo ""
    echo "optional arguments:"
    echo "  -h, --help            show this help message and exit"
    echo "  --snap SNAP           Install an extra snap."
    echo "                        This is passed through to 'snap prepare-image'. The snap argument can include"
    echo "                        additional information about the channel and/or risk"
    echo "                        with the following syntax: <snap>=<track|channel>"
    echo "  --extra-snaps EXTRA_SNAPS"
    echo "                        DEPRECATED (use --snap instead)."
    echo "                        Extra snaps to install. This is passed through to"
    echo "                        'snap prepare-image'."
    echo "  -c CHANNEL, --channel CHANNEL"
    echo "                        The snap channel to use"
    echo ""
    echo "Common options:"
    echo "  --netplan-config NETPLAN-CONFIG-FILE"
    echo "                        Network config for netplan, should not be combined with --network-config"
    echo "  --cloud-init USER-DATA-FILE"
    echo "                        cloud-config data to be copied to the image"
    echo "  --network-config NETWORK-CONFIG-FILE"
    echo "                        Network config for cloud init"
    echo "  --disable-console-conf"
    echo "                        disable first boot console configuration"
    echo "  --hooks-directory DIRECTORY"
    echo "                        Path of directory in which scripts for build-time hooks will be located."
    echo "  -O DIRECTORY, --output-dir DIRECTORY"
    echo "                        The directory in which to put generated disk image"
    echo "                        files."
    echo "  -w DIRECTORY, --workdir DIRECTORY"
    echo "                        The working directory in which to download and unpack"
    echo "                        all the source files for the image. This directory can"
    echo "                        exist or not, and it is not removed after this program"
    echo "                        exits. If not given, a temporary working directory is"
    echo "                        used instead"
    echo "  -o, --overlay"
    echo "                        directory to overlay on top of rootfs"
    echo " --full-size            writable partition is build to full size to occupy rest of the available space on storage"
    echo " --keep-raw             keep raw writable image as well as sparse image used by fastboot"
    echo "                        raw images are needed when QFIL or qdl flash tools are used"
}

unset SNAPS
unset EXTRA_SNAPS
unset CHANNEL
unset BOOTLOADER
unset CUSTOM_OVERLAY
unset DISABLE_CONSOLE_CONF
while [ "$1" != "" ]; do
    case $1 in
        -c | --channel)
            CHANNEL="--channel $2"
            shift
            ;;
        --extra-snaps=*)
            echo "DEPRECATED: --extra-snaps will removed, use --snap instead"
            EX_SNAP=$(echo $1 | awk -F= '{print $2}')
            EXTRA_SNAPS="${EXTRA_SNAPS} --extra-snaps=${EX_SNAP}"
            ;;
        --extra-snaps)
            echo "DEPRECATED: --extra-snaps will removed, use --snap instead"
            EXTRA_SNAPS="${EXTRA_SNAPS} --extra-snaps=${2}"
            shift
            ;;
        --snap=*)
            EX_SNAP=$(echo $1 | awk -F= '{print $2}')
            SNAPS="${SNAPS} --snap=${EX_SNAP}"
            ;;
        --snap)
            SNAPS="${SNAPS} --snap=${2}"
            shift
            ;;
        -O | --output-dir)
            builder_output="$2"
            shift
            ;;
        -w | --workdir)
            builder_work_dir="$2"
            shift
            ;;
        --netplan-config)
            if [ -n "$2" ] && [ -f $2 ]; then
                NETPLAN_CONF="$2"
            else
                echo "wrong netplan config file was passed [ $2 ]"
                exit
            fi
            shift
            ;;
        --cloud-init)
            if [ -n "$2" ] && [ -f $2 ]; then
                CLOUD_INIT="$2"
            else
                echo "wrong cloud init user data file was passed [ $2 ]"
                exit
            fi
            shift
            ;;
        --hooks-directory)
            if [ -n "$2" ] && [ -d $2 ];then
                HOOK_DIR="$2"
            else
                echo "wrong hooks dir was passed [ $2 ]}"
                exit
            fi
            shift
            ;;
        --network-config)
            if [ -n "$2" ] && [ -f $2 ]; then
                NETWORK_CONFIG="$(readlink -f ${2})"
            else
                echo "wrong network config for cloud init was passed [ $2 ]"
                exit
            fi
            shift
            ;;
        --disable-console-conf)
            DISABLE_CONSOLE_CONF="true"
            ;;
        -o | --overlay)
            if [ -n "$2" ] && [ -d $2 ]; then
                CUSTOM_OVERLAY="$(readlink -f ${2})"
            else
                echo "wrong overlay directory passed [ $2 ]"
                exit
            fi
            shift
            ;;
        --full-size)
            BUILD_FULL_SIZE="true"
            ;;
        --help | -h)
            print_usage
            exit
            ;;
        --keep-raw)
            KEEP_RAW="true"
            ;;
        *)
            if [ -f $1 ]; then
                MODEL_ASSERTION=$1
            else
                echo "Unknown parameter '$1'"
                print_usage
                exit
            fi
            ;;
    esac
    shift
done

# first do cleaning
rm -rf ${builder_work_dir}

echo "Running: snap prepare-image ${CHANNEL} ${SNAPS} ${EXTRA_SNAPS} ${MODEL_ASSERTION} ${builder_work_dir}"
if ! snap prepare-image ${CHANNEL} ${SNAPS} ${EXTRA_SNAPS} ${MODEL_ASSERTION} ${builder_work_dir}; then
  exit
fi

mkdir -p ${builder_work_dir}/root/system-data/
if [ -d ${builder_work_dir}/image/boot/uboot ]; then
    BOOTLOADER="uboot"
    mv ${builder_work_dir}/image/boot/uboot ${builder_work_dir}/system-boot
    cp -r ${builder_work_dir}/gadget/blobs ${builder_work_dir}/system-boot/
elif [ -d ${builder_work_dir}/image/boot/lk ]; then
    BOOTLOADER="lk"
    mv ${builder_work_dir}/image/boot/lk ${builder_work_dir}/lk
fi
mv ${builder_work_dir}/image/* ${builder_work_dir}/root/system-data/


if [ -n "${CLOUD_INIT}" ]; then
    echo -e "\nUsing passed cloud init user data configuration: [${CLOUD_INIT}]"
    mkdir -p ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net
    cp ${CLOUD_INIT} ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net/user-data
    echo "instance-id: nocloud-static" > ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net/meta-data
fi

if [ -n "${NETWORK_CONFIG}" ]; then
    echo -e "\nUsing passed cloud init network configuration: [${NETWORK_CONFIG}]"
    mkdir -p ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net
    cp ${NETWORK_CONFIG} ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net/network-config
    echo "instance-id: nocloud-static" > ${builder_work_dir}/root/system-data/var/lib/cloud/seed/nocloud-net/meta-data
fi

if [ -n "${NETPLAN_CONF}" ]; then
    echo -e "\nUsing passed netplan configuration: [${NETPLAN_CONF}]"
    mkdir -p ${builder_work_dir}/root/system-data/etc/netplan
    cp ${NETPLAN_CONF} ${builder_work_dir}/root/system-data/etc/netplan/00-snapd-config.yaml
fi

if [ -n "${HOOK_DIR}" ]; then
   echo -e "\nInvoking hooks"
   export UBUNTU_IMAGE_HOOK_ROOTFS="$(realpath ${builder_work_dir}/root)"
   if [ -f ${HOOK_DIR}/post-populate-rootfs ]; then
      UBUNTU_IMAGE_HOOK_ROOTFS="$(realpath ${builder_work_dir}/root)" ${HOOK_DIR}/post-populate-rootfs
   fi
   if [ -d ${HOOK_DIR}/post-populate-rootfs.d ]; then
       UBUNTU_IMAGE_HOOK_ROOTFS="$(realpath ${builder_work_dir}/root)" find ${HOOK_DIR}/post-populate-rootfs.d -type f -executable -exec sh -c {} \;
   fi
fi

if [ "true" == "${DISABLE_CONSOLE_CONF}" ]; then
    mkdir -p ${builder_work_dir}/root/system-data/var/lib/console-conf
    touch ${builder_work_dir}/root/system-data/var/lib/console-conf/complete
fi

if [ "${BOOTLOADER}" == "uboot" ]; then
    echo -e "\nCreating system-boot partition"
    dd if=/dev/zero of=${builder_work_dir}/system-boot.img bs=1024 count=131072
    mkfs.vfat -s 1 -S 512 -F 32 -n 'system-boot' ${builder_work_dir}/system-boot.img
    mcopy -s -i ${builder_work_dir}/system-boot.img ${builder_work_dir}/system-boot/* ::
fi

if [ -n "${CUSTOM_OVERLAY}" ];then
    echo "Applying custom overlay"
    cp -r ${CUSTOM_OVERLAY}/* ${builder_work_dir}/root
fi

# check if gadget has partition 'seed', for factory reset
if [ -n "$(grep 'name\: seed' ${builder_work_dir}/gadget/meta/gadget.yaml)" ]; then
  echo -e "\nCreating seed partition instead of writable"
  # copy back up files in root/boot
  mkdir -p ${builder_work_dir}/root/boot
  # copy only image files from gadget.yaml
  BLOBS="$(grep 'image\:' ${builder_work_dir}/gadget/meta/gadget.yaml | awk '{print $3}')"
  while IFS= read -r image
  do
      [ -e ${builder_work_dir}/gadget/blobs/${image} ] && cp -r ${builder_work_dir}/gadget/blobs/${image} ${builder_work_dir}/root/boot
  done <<< "${BLOBS}"

  if [ "${BOOTLOADER}" == "uboot" ]; then
   dd if=${builder_work_dir}/system-boot.img bs=1024k | gzip -c > "${builder_work_dir}/root/boot/system-boot.img.gz"
  else
   cp ${builder_work_dir}/lk/* ${builder_work_dir}/root/boot
  fi

  [ -e "${builder_work_dir}/gadget/blobs/gpt_both0.bin" ] && GPT_BIN="${builder_work_dir}/gadget/blobs/gpt_both0.bin"
  [ -e "${builder_work_dir}/gadget/blobs/MBR_EMMC" ] && GPT_BIN="${builder_work_dir}/gadget/blobs/MBR_EMMC"
  ROOT_SIZE="$(sgdisk -p ${GPT_BIN} 2>&1 | grep seed | awk '{printf("%.0fM",($3-$2+1)/2048)}')"
  echo "mkfs.ext4 -O -metadata_csum -T default -E root_owner=0:0 -O uninit_bg -L seed -d ${builder_work_dir}/root ${builder_work_dir}/seed.raw ${ROOT_SIZE}"
  mkfs.ext4 -O -metadata_csum -T default -E root_owner=0:0 -O uninit_bg -L seed -d ${builder_work_dir}/root ${builder_work_dir}/seed.raw ${ROOT_SIZE}
  echo -e "\nCreate sparse image for seed"
  echo "img2simg ${builder_work_dir}/seed.raw ${builder_work_dir}/seed.img"
  img2simg ${builder_work_dir}/seed.raw ${builder_work_dir}/seed.img
else
  echo -e "\nCreating sparse image for writable"

  if [ "${BUILD_FULL_SIZE}" = "true" ]; then
    echo "Calculating size available for writable partition"
    # db410c storage is: 7818182656 bytes (15269854)
    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f",(15269854-$2))}')"
    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f",(15269854-$2)*512)}')B"
    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f",(15269854-$2)/2)}')K"
    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f",(15269854-$2-51200)/2048)}')M"
   #    ROOT_SIZE="$(sgdisk -p ${builder_work_dir}/gadget/blobs/gpt_both0.bin 2>&1 | grep writable | awk '{printf("%.0f", (15269854-$2)*512)}')"
    echo "ROOT_SIZE=${ROOT_SIZE}"
  else
    if [ "${BOOTLOADER}" = "uboot" ]; then
        ROOT_SIZE=$(du -sh ${builder_work_dir}/root/ | awk -v sb="$(du -sh ${builder_work_dir}/system-boot)" '{printf("%.0f",($1+sb+50))}')M
    elif [ "${BOOTLOADER}" = "lk" ]; then
        ROOT_SIZE=$(du -sh ${builder_work_dir}/root/ | awk -v sb="$(du -sh ${builder_work_dir}/lk)" '{printf("%.0f",($1+sb+50))}')M
    else
        ROOT_SIZE=$(du -sh ${builder_work_dir}/root/ | awk '{printf("%.0f",($1+50))}')M
    fi
  fi
  echo "mkfs.ext4 -O -metadata_csum -T default -E root_owner=0:0 -O uninit_bg -L writable -d ${builder_work_dir}/root ${builder_work_dir}/writable.raw ${ROOT_SIZE}"
  mkfs.ext4 -O -metadata_csum -T default -E root_owner=0:0 -O uninit_bg -L writable -d ${builder_work_dir}/root ${builder_work_dir}/writable.raw ${ROOT_SIZE}
  echo -e "\nCreate sparse image for writable"
  echo "img2simg ${builder_work_dir}/writable.raw ${builder_work_dir}/writable.img"
  img2simg ${builder_work_dir}/writable.raw ${builder_work_dir}/writable.img
fi


mkdir -p ${builder_output}
cp -r ${builder_work_dir}/gadget/blobs/* ${builder_output}/
if [ "${KEEP_RAW}" = "true" ]; then
    [ -e ${builder_work_dir}/writable.raw ] && mv ${builder_work_dir}/writable.raw ${builder_output}/
    [ -e ${builder_work_dir}/seed.raw ] && mv ${builder_work_dir}/seed.raw ${builder_output}/
fi

[ -e ${builder_work_dir}/writable.img ] && mv ${builder_work_dir}/writable.img ${builder_output}/
[ -e ${builder_work_dir}/seed.img ] &&  mv ${builder_work_dir}/seed.img ${builder_output}/

if [ "${BOOTLOADER}" = "uboot" ]; then
    mv ${builder_work_dir}/system-boot.img ${builder_output}
elif [ "${BOOTLOADER}" = "lk" ]; then
    cp ${builder_work_dir}/lk/* ${builder_output}/
fi
echo -e "\nOutput available in: '${builder_output}'"

